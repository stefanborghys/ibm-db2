#!/bin/sh
#############################################################################
#
# Licensed Materials - Property of IBM
#
# "Restricted Materials of IBM" 
#
# (C) COPYRIGHT IBM Corp. 1993, 2012 All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#############################################################################



#
# NAME: db2IdentifyType1
#
# FUNCTION: db2IdentifyType1 - Identify Type-1 indexes and create CLP
# script to convert.
#
# USAGE: db2IdentifyType1 -d <db name>
#                         -o <CLP script file>
#                         [-s <schema name>]
#                         [-t <table name>]
#        or
#        db2IdentifyType1 -h
#
########################################################################

# Options for "set" command
setopts="${setopts:-+x}"
set ${setopts?}

# Current DB2 installation directory
curdir=`/bin/pwd -P`
DB2DIR=`dirname $0`
cd ${DB2DIR?}
DB2DIR=`/bin/pwd -P`
cd ${DB2DIR?}
DB2DIR=`dirname ${DB2DIR?}`
cd ${curdir?}
unset curdir

# Set the directory name where this file is located.
curdir=`/bin/pwd -P`
PROGDIR=`/usr/bin/dirname $0`
cd ${PROGDIR?}
PROGDIR=`/bin/pwd -P`
cd ${curdir?}

PROGNAME=`/usr/bin/basename $0`       # Program name
INSTALLDIR=`dirname ${PROGDIR?}`/install
BINDIR=`dirname ${PROGDIR?}`/bin

TRUE=0
FALSE=1





OLD_LIBPATH="$LIBPATH"
unset LIBPATH

OLD_LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
unset LD_LIBRARY_PATH

OLD_LD_LIBRARY_PATH_32="$LD_LIBRARY_PATH_32"
unset LD_LIBRARY_PATH_32

OLD_LD_LIBRARY_PATH_64="$LD_LIBRARY_PATH_64"
unset LD_LIBRARY_PATH_64

OLD_SHLIB_PATH="$SHLIB_PATH"
unset SHLIB_PATH



LIBPATH="$OLD_LIBPATH"
if [ "X${LIBPATH?}" != "X" ]; then
   export LIBPATH
else
   unset LIBPATH
fi
unset OLD_LIBPATH

LD_LIBRARY_PATH="$OLD_LD_LIBRARY_PATH"
if [ "X${LD_LIBRARY_PATH?}" != "X" ]; then
   export LD_LIBRARY_PATH
else
   unset LD_LIBRARY_PATH
fi
unset OLD_LD_LIBRARY_PATH

LD_LIBRARY_PATH_32="$OLD_LD_LIBRARY_PATH_32"
if [ "X${LD_LIBRARY_PATH_32?}" != "X" ]; then
   export LD_LIBRARY_PATH_32
else
   unset LD_LIBRARY_PATH_32
fi
unset OLD_LD_LIBRARY_PATH_32

LD_LIBRARY_PATH_64="$OLD_LD_LIBRARY_PATH_64"
if [ "X${LD_LIBRARY_PATH_64?}" != "X" ]; then
   export LD_LIBRARY_PATH_64
else
   unset LD_LIBRARY_PATH_64
fi
unset OLD_LD_LIBRARY_PATH_64

SHLIB_PATH="$OLD_SHLIB_PATH"
if [ "X${SHLIB_PATH?}" != "X" ]; then
   export SHLIB_PATH
else
   unset SHLIB_PATH
fi
unset OLD_SHLIB_PATH



# Add some functions needed in db2iutil or db2idefs 
#=======================================================


# This function queries the current .instuse to find a string
query_instuse_string()
{
    trac query_instuse_string $@
    set ${setopts?}

    INST2QUERY="$1"
    DB2FTN="$2"
    DEFAULT="$3"
    BYDAS="$4"

    CMD_DB2FUPDT=${DB2DIR?}/bin/db2fupdt
    find_homedir ${INST2QUERY?}
    INSTUSE=${USERHOME?}/sqllib/ctrl/.instuse
    if [ "X${BYDAS?}" = "Xdas" ]; then
        INSTUSE=${USERHOME?}/das/ctrl/.instuse
    fi

    INSTUSE_VALUE=`${CMD_DB2FUPDT?} -f ${INSTUSE?} -p ${DB2FTN?}`
    rc=$?

    # if no output (error), assume default.
    if [ ${rc?} -ne 0 ]
    then
        INSTUSE_VALUE="${DEFAULT?}"
    fi
    trax query_instuse_string
    return ${rc?}
}


# Find the home dir for given user ID. Set environment variable USERHOME
find_homedir ()
{
    trac find_homedir $@
    set ${setopts?}

    username=$1

    # is the user valid?
    if ${DB2DIR?}/bin/db2usrinf -q ${username?}
    then
        USERHOME=`${DB2DIR?}/bin/db2usrinf -d ${username?}`
    else
        display_msg ${DB2CAT?} 131 \
            'DBI1131E The user ID %s is invalid.' ${username?}
        stop_prog 1
    fi

    trax find_homedir
    return 0
}


#-----------------------------------------------------------------------
# Name      - InstanceBitWidth
# Functions - Returns Bit Width of Instance
# Params.   - None
# Returns   - 32 or 64
#-----------------------------------------------------------------------
InstanceBitWidth ()
{
    trac InstanceBitWidth $@
    set ${setopts?}
    find_homedir ${INSTNAME?}
    ibw=32
    if [ -f "${USERHOME?}/sqllib/ctrl/.instuse" ]; then
        grep 'BitWidth=64' "${USERHOME?}/sqllib/ctrl/.instuse" 1>/dev/null 2>/dev/null
        if [ $? -eq 0 ]; then
            ibw=64
        fi
    fi
    trax InstanceBitWidth
    return ${ibw?}
}



#-----------------------------------------------------------------------
# Name       - display_msg
# Function   - Displays a message from the message catalog
# Parameters - $1 - name of the message catalog
#            - $2 - message number
#            - $3 - default message string
#            - $4,$5,$6 - arguments to substitute in msg string, if needed
#-----------------------------------------------------------------------
# To display a message when a function is called
trac ()
{
    if [ ${DEBUG?} -eq ${TRUE?} ]; then
       echo "## call function $@"
    fi
}

# To display a message when exiting a function
trax ()
{
    if [ ${DEBUG?} -eq ${TRUE?} ]; then
        echo "## exit function $1"
    fi
}

dmsg ()
{
    DB2INSTLOG=/tmp/db2ckupgrade$$.log
    echo "## $@" 2>&1 | tee -a ${DB2INSTLOG?}
}

display_msg()
{
    set ${setopts?}
    unset catname msgid deftmsg msgstr
    catname="$1"
    msgid=$2
    deftmsg="$3"

    shift;shift;shift

     ${BINDIR?}/disp_msg 1 ${msgid} ${catname} \
     "${deftmsg}" $@ 2>&1 # | tee -a ${DB2INSTLOG?}

} # end of display_msg()

set_lang_internal ()
{
    set ${setopts?}
    bindir="$1"
    msgdir="$2"
    lang="$3"
    CMD_DB2LANGDIR="${bindir?}/db2langdir"

    if [ "X$lang" != "X" ]; then
       LANG_CUSTOM=0
    else
       LANG_CUSTOM=1
    fi
    # Default locale name and locale-specific message directory
    
    LANG=${LANG:-C}
    locname=${LANG?}
    
    if [ ${LANG_CUSTOM?} -eq 0 ]; then
       locname=`${CMD_DB2LANGDIR?} ${lang?} -locale`
       DB2_LANG_JAVA=${locname?}
       DB2_LANG_JAVA_SET=1
    fi
    langdir=`${CMD_DB2LANGDIR?} ${locname?}`
    clangdir=`${CMD_DB2LANGDIR?} C`

    if [ -f ${msgdir?}/${langdir?}/db2install.cat ]; then
        DB2CAT="${msgdir?}/${langdir?}/db2install.cat"
        LANGUAGEDIR=${langdir?}
    elif [ -f ${msgdir?}/${clangdir?}/db2install.cat ]; then
        DB2CAT="${msgdir?}/${clangdir?}/db2install.cat"
        LANGUAGEDIR=${clangdir?}
    else
        echo "DBI1055E The message file db2install.cat cannot be found."
        echo
        echo "Explanation:  The message file required by this"
        echo "script is missing from the system; it may have been"
        echo "deleted or the database products may have been loaded"
        echo "incorrectly."
        echo
        echo "User Response:  Verify that the product option containing"
        echo "the message file is installed correctly.  If there are"
        echo "verification errors; reinstall the product option."
        exit 67
    fi

    # check if the locale exists.  If not, we'll set LANG to C for any
    # subprocesses.
    locale -a 2> /dev/null | grep '^'${locname?}'$' > /dev/null
    if [ $? -ne 0 ]
    then
        locname=C
    fi

    # if a language was passed in, set LANG - but if not, leave it alone.
    # (if it isn't a valid language, well, try resetting anyway)
    locale -a 2> /dev/null | grep '^'${LANG:-C}'$' > /dev/null
    if [ $? -eq 0 -a ${LANG_CUSTOM?} -eq 0 ]
    then
        LANG=${locname?}
    fi

    # Set LANG and NLSPATH variables for use by dspmsg command
    NLSPATH="${msgdir?}/%L/%N:${msgdir?}/${clangdir?}/%N"
    SHORTLANG=`${CMD_DB2LANGDIR?} ${LANG:-C} -short`

    export LANG NLSPATH
}

set_lang ()
{
    set ${setopts?}
    set_lang_internal ${BINDIR?} ${INSTALLDIR?}/locale $1
}
# Check if non-root is running the prog
chk_nonroot ()
{
    set ${setopts?}

        if [ `${BINDIR?}/db2usrinf -E` -eq 0 ]; then
                display_msg ${DB2CAT?} 51 \
                'DBI1051E You cannot execute this program as root.'
                 rm -f ${DB2INSTLOG?}
                 exit 1
        fi
}

# Add some functions needed in db2iutil or db2idefs - END
#=======================================================

set_lang
chk_nonroot        # Check that root is NOT running this program



#-----------------------------------------------------------------------#
#               Start of function definitions
#-----------------------------------------------------------------------#
# Find the home directory associated with the named user
# This is used in place of chk_version, which requires root user to run
findIdentHome()
{
    trac findIdentHome $@
    set ${setopts?}

    curuser=$1
    db2proddir=""



    INSTHOME=`${DB2DIR?}/bin/db2usrinf -d ${curuser?}`



    if [ $? -ne 0 -o "X${INSTHOME?}" = "X" ]; then
        display_msg ${DB2CAT?} 131 \
            'DBI1131E The user ID %s is invalid.\n' ${curuser?}
        exit 4
    fi

    instbindir="${INSTHOME?}/sqllib/bin"     # sqllib/bin dir of the instance
    instlibdir="${INSTHOME?}/sqllib/lib"     # sqllib/lib dir of the instance

    if [ ! -d ${instbindir?} ]; then
        display_msg ${DB2CAT?} 97 \
            'DBI1097E The directory %s does not exist.\n' ${instbindir?}
        exit 4
    fi

    # For DB2 Version 9 or later, the attribute V is defined in
    # sqllib/ctrl/.instuse file. We need to get the DB2 install
    # location directly from the .instuse

    INSTUSE_VALUE="PRE_V9"
    check_instuse=${FALSE?}
    query_instuse_string ${curuser?} V "PRE_V9"
    if [ "X${INSTUSE_VALUE?}" != "XPRE_V9" ]; then
       check_instuse=${TRUE?}
    fi

    # use instuse for V8 - for multiple FP implementation
    query_instuse_string ${INSTNAME?} INSTVER 0

    # if INSTVER is 81 then it is a V8 instance - can be anyone of the multiple FP
    if [ "X${INSTUSE_VALUE?}" = "X81" -o ${check_instuse} -eq ${TRUE?} ]; then
        # find out what is its install path - use that to set db2proddir
        query_instuse_string ${INSTNAME?} DB2DIR ${DB2DIR?}
        db2proddir=${INSTUSE_VALUE?}
    else
        /bin/echo "This DB2 Version is not supported by db2IdentifyType1."
        exit 1
    fi

    trax findIdentHome
}

# pass arguments into db2IdentifyType1
call_idt1_exe()
{
    trac call_idt1_exe $@
    set ${setopts?}

    # Find out what level of DB2 is associated with INSTNAME and set LIBPATH accordingly
    findIdentHome ${INSTNAME?}
    DB2IPRDDIR="${db2proddir?}"   # DB2 product dir for instance INSTNAME

    # depending on whether existing instance is 32-bit or 64-bit, we need
    # to use a different binary.
    # default to 32-bit
    DB2LIB="lib"
    InstanceBitWidth
    IBW=$?

    if [ ${IBW?} -eq 64 ]
    then
        DB2LIB="lib64"
    else

        CMD_IDT1_EXE=""
    fi

    if [ ${IBW?} -eq 32 -a ${check_instuse?} -eq ${TRUE?} ]
    then
        CMD_IDT1_EXE=${CMD_IDT1_9_32?}
    elif [ ${IBW?} -eq 32 -a ${check_instuse?} -ne ${TRUE?} ]
    then
        CMD_IDT1_EXE=${CMD_IDT1_8_32?}
    elif [ ${IBW?} -eq 64 -a ${check_instuse?} -eq ${TRUE?} ]
    then
        CMD_IDT1_EXE=${CMD_IDT1_9_64?}
    elif [ ${IBW?} -eq 64 -a ${check_instuse?} -ne ${TRUE?} ]
    then
        CMD_IDT1_EXE=${CMD_IDT1_8_64?}
    else
        # fallback
        CMD_IDT1_EXE=${CMD_IDT1_8_32?}
    fi




    LIBPATH="${DB2IPRDDIR?}/${DB2LIB?}"
    export LIBPATH





    # pass argument into db2IdentifyType1
    ${CMD_IDT1_EXE?} ${ARGLIST?}
    idt1rc=$?






    unset LIBPATH





    trax call_idt1_exe
}

# Default values for command line options
defaultopts()
{
    # trac defaultopts $@

    idt1rc=0
    HELPFLAG=${FALSE?}

    DEBUG=1               # Debug mode is FALSE

    INSTNAME=""           # Initialize variable for instance name
    INSTHOME=""           # Initialize variable for instance home directory

    CMD_IDT1_9_64="${BINDIR?}/db2IdentifyType1_v9_64"
    CMD_IDT1_8_64="${BINDIR?}/db2IdentifyType1_v8_64"
    CMD_IDT1_9_32="${BINDIR?}/db2IdentifyType1_v9_32"
    CMD_IDT1_8_32="${BINDIR?}/db2IdentifyType1_v8_32"

    # trax defaultopts
}


#-----------------------------------------------------------------------#
#                End of function definitions
#-----------------------------------------------------------------------#

#-----------------------------------------------------------------------#
#                             Main program
#-----------------------------------------------------------------------#

defaultopts        # Define default values for command-line options

# Process command-line options
case $# in
    0)
        HELPFLAG=${TRUE?} ;;
    *)
        ARGLIST=$@
        while [ "X$1" != "X-h" -a "X$1" != "X/h" -a "X$1" != "X" ];
        do
            shift
        done
        if [ "X$1" = "X-h" -a "X$1" != "X/h" ]; then
           HELPFLAG=${TRUE?}
        fi
        ;;
esac

if [ ${HELPFLAG?} -eq ${TRUE?} ]; then
    ARGLIST="-h"
fi

set ${setopts?}

ARGLIST="${ARGLIST?}"


    INSTNAME=`${DB2DIR?}/bin/db2usrinf -n -R`


trap "stop_prog 2" 1 2 3 15

# organize input and pass it to db2IdentifyType1
call_idt1_exe

# exit
exit ${idt1rc?}

